package com.fuse.dao;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;

import com.fuse.utils.FSUtils;

@Entity
public class Vulnerability {
	
	@Id
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "vulnGen")
    @TableGenerator(
        name = "vulnGen",
        table = "vulnGenseq",
        pkColumnValue = "vuln",
        valueColumnName = "nextVuln",
        initialValue = 1,
        allocationSize = 1
    )
	private Long id;
	private String name;
	private String description;
	private String desc_notes;
	private String recommendation;
	private String rec_notes;
	private Long assessmentId;
	private Long assessorId;
	@ManyToOne(fetch=FetchType.EAGER)
	private Category category;
	private Long likelyhood;
	private Long impact;
	private Long overall;
	private Date closed;
	private Date opened;
	private Date devClosed;
	private String tracking = "VID-" + (new Random()).nextInt(10000-500) + 500;
	@OneToMany(fetch=FetchType.EAGER, cascade=CascadeType.ALL, orphanRemoval=true)
	private List<ExploitStep> steps;
	@ManyToOne(fetch=FetchType.EAGER)
	private DefaultVulnerability defaultVuln;
	//private boolean closed;
	private String cvssScore;
	@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval=true)
	private List<CustomField> CustomFields;
	
	@Transient
	private List<RiskLevel>levels = new ArrayList();

	
	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		description = FSUtils.sanitizeHTML(description);
		this.description = description;
	}
	public String getRecommendation() {
		return recommendation;
	}
	public void setRecommendation(String recommendation) {
		recommendation = FSUtils.sanitizeHTML(recommendation);
		this.recommendation = recommendation;
	}
	public long getAssessmentId() {
		return assessmentId;
	}
	public void setAssessmentId(long assessmentId) {
		this.assessmentId = assessmentId;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public Long getLikelyhood() {
		return likelyhood;
	}
	public void setLikelyhood(Long likelyhood) {
		this.likelyhood = likelyhood;
	}
	
	public Date getClosed() {
		return closed;
	}
	public void setClosed(Date closed) {
		this.closed = closed;
	}
	public Date getOpened() {
		return opened;
	}
	public void setOpened(Date opened) {
		this.opened = opened;
	}
	public Long getImpact() {
		return impact;
	}
	public void setImpact(Long impact) {
		this.impact = impact;
	}
	
	public Long getOverall() {
		return overall;
	}
	public void setOverall(Long overall) {
		this.overall = overall;
	}
	public DefaultVulnerability getDefaultVuln() {
		return defaultVuln;
	}
	public void setDefaultVuln(DefaultVulnerability defaultVuln) {
		this.defaultVuln = defaultVuln;
	}
	
	public Date getDevClosed() {
		return devClosed;
	}
	public void setDevClosed(Date devClosed) {
		this.devClosed = devClosed;
	}
	@Transient
	public void updateRiskLevels(EntityManager em){
		levels = em.createQuery("from RiskLevel").getResultList();
	}
	@Transient
	public void updateRiskLevels(){
		//TODO:This is probably a terrible idea
		EntityManager em = HibHelper.getInstance().getEM();
		levels = em.createQuery("from RiskLevel").getResultList();
		em.close();
	}
	@Transient
	public String vulnStr(Long id){
		for(RiskLevel level : levels){
			if(id.intValue() == level.getRiskId())
				return level.getRisk();
		}
		return "Unassigned";
		/*switch(id.intValue()){
			case 0 : return "Informational";
			case 1 : return "Recommended";
			case 2 : return "Low";
			case 3 : return "Medium";
			case 4 : return "High";
			case 5 : return "Critical";
			default : return "junk";
		}*/
	}
	@Transient
	public String getImpactStr(){
		return this.vulnStr(this.impact);
	}
	@Transient
	public String getOverallStr(){
		return this.vulnStr(this.overall);
	}
	@Transient
	public String getLikelyhoodStr(){
		return this.vulnStr(this.likelyhood);
	}
	
	public String getTracking() {
		return tracking;
	}
	public void setTracking(String tracking) {
		this.tracking = tracking;
	}
	
	public void setId(Long id) {
		this.id = id;
	}
	public void setAssessmentId(Long assessmentId) {
		this.assessmentId = assessmentId;
	}
	public String getDesc_notes() {
		return desc_notes;
	}
	public void setDesc_notes(String desc_notes) {
		this.desc_notes = desc_notes;
	}
	public String getRec_notes() {
		return rec_notes;
	}
	public void setRec_notes(String rec_notes) {
		this.rec_notes = rec_notes;
	}
	public String getCvssScore() {
		return cvssScore;
	}
	public void setCvssScore(String cvssScore) {
		this.cvssScore = cvssScore;
	}
	public Long getAssessorId() {
		return assessorId;
	}
	public void setAssessorId(Long assessorId) {
		this.assessorId = assessorId;
	}
	public List<CustomField> getCustomFields() {
		return CustomFields;
	}
	public void setCustomFields(List<CustomField> customFields) {
		CustomFields = (List<CustomField>) customFields;
	}
	public List<ExploitStep> getSteps() {
		return steps;
	}
	public List<RiskLevel> getLevels() {
		return levels;
	}
	public void setSteps(List<ExploitStep> steps) {
		this.steps = steps;
	}
	
	@Transient
	public void setLevels(List<RiskLevel> levels) {
		this.levels = levels;
	}
	
	
	
	
	

	
	
	
	
}
